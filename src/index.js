const axios = require('axios');
const crypto = require('crypto');
const AxiosDigestAuth = require('@mhoc/axios-digest-auth').default;
const redisCache = require('./redis-cache');
const Piscina = require('piscina');
const path = require('path');
require('dotenv').config();

/**
 * Script para cadastrar m√∫ltiplas catracas via API
 * Processa um array de IPs e chama a rota de configura√ß√£o para cada um
 */

/**
 * Gera autentica√ß√£o digest HTTP
 */
function generateDigestAuth(username, password, method, uri, realm, nonce, qop, nc, cnonce) {
    const ha1 = crypto.createHash('md5').update(`${username}:${realm}:${password}`).digest('hex');
    const ha2 = crypto.createHash('md5').update(`${method}:${uri}`).digest('hex');
    const response = crypto.createHash('md5').update(`${ha1}:${nonce}:${nc}:${cnonce}:${qop}:${ha2}`).digest('hex');
    
    return `Digest username="${username}", realm="${realm}", nonce="${nonce}", uri="${uri}", qop=${qop}, nc=${nc}, cnonce="${cnonce}", response="${response}"`;
}

/**
 * Busca participantes da API
 */
async function fetchParticipants() {
    try {
        const baseUrl = process.env.BASE_URL;
        const eventId = process.env.EVENT_ID
        
        if (!baseUrl) {
            throw new Error('Vari√°vel de ambiente BASE_URL n√£o est√° definida');
        }

        if (!eventId) {
            throw new Error('Vari√°vel de ambiente EVENT_ID n√£o est√° definida');
        }

        const url = `${baseUrl}/api/open/event/${eventId}/participants`;
        
        console.log(`üîç Buscando participantes de: ${url}`);
        
        const response = await axios.get(url, {
            timeout: 30000, // Timeout de 30 segundos
            headers: {
                'User-Agent': 'BMA-Ratchet-Script/1.0.0',
                'Content-Type': 'application/json'
            }
        });

        if (response.data.success && response.data.data) {
            console.log(`‚úÖ Encontrados ${response.data.data.length} participantes`);
            return response.data.data;
        } else {
            throw new Error('Resposta da API n√£o cont√©m dados v√°lidos');
        }

    } catch (error) {
        console.error('‚ùå Erro ao buscar participantes:', error.message);
        throw error;
    }
}

/**
 * Registra um usu√°rio em uma catraca individual
 */
async function registerUserInRatchet(deviceIp, participant, skipCache = false) {
    try {
        // Verifica se o usu√°rio j√° foi registrado (cache)
        if (!skipCache) {
            const isAlreadyRegistered = await redisCache.isUserRegistered(deviceIp, participant);
            if (isAlreadyRegistered) {
                console.log(`‚è≠Ô∏è  SKIP: ${participant.nome} (${participant.codigo_de_convite}) j√° registrado na catraca ${deviceIp} (cache)`);
                return {
                    deviceIp,
                    participant,
                    success: true,
                    skipped: true,
                    fromCache: true,
                    message: 'Usu√°rio j√° registrado anteriormente (verificado via cache)'
                };
            }
        }

        console.log(`üîÑ Registrando ${participant.nome} (${participant.codigo_de_convite}) na catraca ${deviceIp}...`);

        // Monta a URL da requisi√ß√£o
        const url = `http://${deviceIp}/cgi-bin/recordUpdater.cgi?action=insert&name=AccessControlCard&CardNo=${participant.codigo_de_convite}&CardStatus=0&CardName=${encodeURIComponent(participant.nome)}&UserID=${participant.id}&Doors[0]=0&CardStatus=0&CardType=2&UseTimes=1`;

        // Configura√ß√£o de autentica√ß√£o digest
        const username = process.env.DIGEST_USERNAME;
        const password = process.env.DIGEST_PASSWORD;
        
        let headers = {
            'User-Agent': 'BMA-Ratchet-Script/1.0.0'
        };

        // Se username e password est√£o definidos, adiciona autentica√ß√£o digest
        const axiosDigest = new AxiosDigestAuth({
            username,
            password
        })

        // Faz a requisi√ß√£o HTTP
        const response = await axiosDigest.request({
            headers: headers,
            method: 'GET',
            url
        });

        console.log(`‚úÖ Usu√°rio ${participant.nome} registrado com sucesso na catraca ${deviceIp}! Status: ${response.status}`);
        
        // Marca o usu√°rio como registrado no cache
        await redisCache.markUserAsRegistered(deviceIp, participant);
        
        return {
            deviceIp,
            participant,
            success: true,
            skipped: false,
            status: response.status,
            data: response.data
        };

    } catch (error) {
        console.error(`‚ùå Erro ao registrar ${participant.nome} na catraca ${deviceIp}:`, error.message);
        
        if (error.response) {
            console.error(`Status HTTP: ${error.response.status}`);
        } else if (error.request) {
            console.error('Erro de conex√£o - n√£o foi poss√≠vel conectar ao dispositivo');
        }

        return {
            deviceIp,
            participant,
            success: false,
            skipped: false,
            error: error.message
        };
    }
}

/**
 * Registra todos os usu√°rios em todas as catracas (com multi-threading usando Piscina)
 */
async function registerAllUsersInAllRatchets(options = {}) {
    let piscina = null;
    
    try {
        // Inicializa o cache Redis
        console.log('üîå Conectando ao Redis...');
        await redisCache.connect();
        
        // Verifica se as vari√°veis de ambiente est√£o definidas
        const deviceIps = process.env.DEVICE_IPS;
        const baseUrl = process.env.BASE_URL;
        const skipCache = options.skipCache || false;
        const useMultiThreading = options.useMultiThreading !== false; // Ativo por padr√£o
        const maxConcurrency = options.maxConcurrency || 10; // N√∫mero de workers simult√¢neos

        if (!deviceIps) {
            throw new Error('Vari√°vel de ambiente DEVICE_IPS n√£o est√° definida');
        }

        if (!baseUrl) {
            throw new Error('Vari√°vel de ambiente BASE_URL n√£o est√° definida');
        }

        if (skipCache) {
            console.log('‚ö†Ô∏è  Cache desabilitado - todos os usu√°rios ser√£o registrados');
        }

        // Busca os participantes
        const participants = await fetchParticipants();
        
        // Converte a string de IPs em array
        const ipArray = deviceIps.split(',').map(ip => ip.trim());
        
        console.log(`üöÄ Iniciando registro de ${participants.length} usu√°rios em ${ipArray.length} catracas...`);
        console.log(`IPs das catracas: ${ipArray.join(', ')}`);
        
        if (useMultiThreading) {
            console.log(`‚ö° Multi-threading habilitado com ${maxConcurrency} workers simult√¢neos`);
        } else {
            console.log(`üìã Processamento sequencial (single-thread)`);
        }

        const results = [];
        let totalOperations = 0;
        let successCount = 0;
        let errorCount = 0;
        let skippedCount = 0;

        // Cria todas as tarefas
        const tasks = [];
        for (let i = 0; i < participants.length; i++) {
            const participant = participants[i];
            
            for (let j = 0; j < ipArray.length; j++) {
                const deviceIp = ipArray[j];
                totalOperations++;
                
                tasks.push({
                    deviceIp,
                    participant,
                    skipCache
                });
            }
        }

        console.log(`üì¶ Total de ${tasks.length} tarefas criadas`);
        
        if (useMultiThreading) {
            // Modo multi-threading com Piscina
            piscina = new Piscina({
                filename: path.resolve(__dirname, 'worker-register-user.js'),
                maxThreads: maxConcurrency,
                minThreads: Math.min(2, maxConcurrency)
            });

            // Processa todas as tarefas em paralelo com limite de concorr√™ncia
            let completedCount = 0;
            const promises = tasks.map(async (task) => {
                const result = await piscina.run(task);
                
                completedCount++;
                
                // Log de progresso
                if (completedCount % 10 === 0 || completedCount === tasks.length) {
                    console.log(`üìä Progresso: ${completedCount}/${tasks.length} (${((completedCount/tasks.length)*100).toFixed(1)}%)`);
                }
                
                // Log individual do resultado
                if (result.success && result.skipped) {
                    console.log(`‚è≠Ô∏è  SKIP: ${result.participant.nome} (${result.participant.codigo_de_convite}) j√° registrado na catraca ${result.deviceIp} (cache)`);
                } else if (result.success) {
                    console.log(`‚úÖ Registrado: ${result.participant.nome} (${result.participant.codigo_de_convite}) na catraca ${result.deviceIp}`);
                } else {
                    console.log(`‚ùå Erro: ${result.participant.nome} (${result.participant.codigo_de_convite}) na catraca ${result.deviceIp} - ${result.error}`);
                }
                
                return result;
            });

            results.push(...await Promise.all(promises));
        } else {
            // Modo sequencial (backward compatibility)
            for (let i = 0; i < tasks.length; i++) {
                const task = tasks[i];
                
                const result = await registerUserInRatchet(task.deviceIp, task.participant, task.skipCache);
                results.push(result);
                
                // Log de progresso
                if ((i + 1) % 10 === 0 || (i + 1) === tasks.length) {
                    console.log(`üìä Progresso: ${i + 1}/${tasks.length} (${(((i + 1)/tasks.length)*100).toFixed(1)}%)`);
                }

                // Pequena pausa entre requisi√ß√µes para n√£o sobrecarregar
                // Pausa menor se for skip do cache
                if (!result.skipped) {
                    await new Promise(resolve => setTimeout(resolve, 500));
                } else {
                    await new Promise(resolve => setTimeout(resolve, 50));
                }
            }
        }
        
        // Processa estat√≠sticas dos resultados
        results.forEach(result => {
            if (result.success) {
                if (result.skipped) {
                    skippedCount++;
                }
                successCount++;
            } else {
                errorCount++;
            }
        });

        // Estat√≠sticas do cache
        const cacheStats = await redisCache.getStats();

        // Relat√≥rio final
        console.log('\nüìä RELAT√ìRIO FINAL:');
        console.log(`üë• Participantes: ${participants.length}`);
        console.log(`üè¢ Catracas: ${ipArray.length}`);
        console.log(`üîÑ Total de opera√ß√µes: ${totalOperations}`);
        console.log(`‚úÖ Sucessos: ${successCount}`);
        console.log(`‚è≠Ô∏è  Pulados (cache): ${skippedCount}`);
        console.log(`‚ùå Erros: ${errorCount}`);
        
        if (cacheStats.enabled) {
            console.log(`\nüíæ Cache Redis:`);
            console.log(`  üì¶ Total de registros no cache: ${cacheStats.totalRecords}`);
        }

        // Lista detalhada dos resultados por participante
        console.log('\nüìã DETALHES POR PARTICIPANTE:');
        participants.forEach(participant => {
            console.log(`\nüë§ ${participant.nome} (${participant.codigo_de_convite}):`);
            const participantResults = results.filter(r => r.participant.id === participant.id);
            participantResults.forEach(result => {
                let status = '';
                if (result.success && result.skipped) {
                    status = '‚è≠Ô∏è ';
                } else if (result.success) {
                    status = '‚úÖ';
                } else {
                    status = '‚ùå';
                }
                console.log(`  ${status} ${result.deviceIp}`);
            });
        });

        return {
            success: errorCount === 0,
            participants: participants.length,
            ratchets: ipArray.length,
            totalOperations,
            successCount,
            errorCount,
            skippedCount,
            results
        };

    } catch (error) {
        console.error('üí• Erro geral no processamento:', error.message);
        return {
            success: false,
            error: error.message
        };
    } finally {
        // Garante que o pool do Piscina seja destru√≠do
        if (piscina) {
            await piscina.destroy();
            console.log('üîå Pool de workers fechado');
        }
    }
}

/**
 * Cadastra uma catraca individual
 */
async function registerSingleRatchet(deviceIp) {
    try {
        console.log(`\nüîÑ Processando catraca  (${deviceIp})...`);

        // Monta a URL da requisi√ß√£o
        const url = `http://${deviceIp}/cgi-bin/configManager.cgi?action=setConfig&_EnableUnsecure_.Enable=true`;

        // Configura√ß√£o de autentica√ß√£o digest
        const username = process.env.DIGEST_USERNAME;
        const password = process.env.DIGEST_PASSWORD;
        
        let headers = {
            'User-Agent': 'BMA-Ratchet-Script/1.0.0'
        };

        // Se username e password est√£o definidos, adiciona autentica√ß√£o digest
        const axiosDigest = new AxiosDigestAuth({
            username,
            password
        })

        // Faz a requisi√ß√£o HTTP
        const response = await axiosDigest.request({
            headers: headers,
            method: 'GET',
            url
        });

        console.log(`‚úÖ Sucesso para ${deviceIp}! Status: ${response.status}`);
        
        return {
            deviceIp,
            success: true,
            status: response.status,
            data: response.data
        };

    } catch (error) {
        console.error(`‚ùå Erro ao cadastrar ${deviceIp}:`, error.message);
        
        if (error.response) {
            console.error(`Status HTTP: ${error.response.status}`);
        } else if (error.request) {
            console.error('Erro de conex√£o - n√£o foi poss√≠vel conectar ao dispositivo');
        }

        return {
            deviceIp,
            success: false,
            error: error.message
        };
    }
}

/**
 * Processa m√∫ltiplas catracas
 */
async function registerMultipleRatchets() {
    try {
        // Verifica se as vari√°veis de ambiente est√£o definidas
        const deviceIps = process.env.DEVICE_IPS;

        if (!deviceIps) {
            throw new Error('Vari√°vel de ambiente DEVICE_IPS n√£o est√° definida');
        }

        // Converte a string de IPs em array
        const ipArray = deviceIps.split(',').map(ip => ip.trim());
        
        console.log(`üöÄ Iniciando cadastro de ${ipArray.length} catracas...`);
        console.log(`IPs a processar: ${ipArray.join(', ')}`);

        const results = [];
        let successCount = 0;
        let errorCount = 0;

        // Processa cada IP sequencialmente
        for (let i = 0; i < ipArray.length; i++) {
            const deviceIp = ipArray[i];
            
            const result = await registerSingleRatchet(deviceIp);
            results.push(result);
            
            if (result.success) {
                successCount++;
            } else {
                errorCount++;
            }

            // Pequena pausa entre requisi√ß√µes para n√£o sobrecarregar
            if (i < ipArray.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }

        // Relat√≥rio final
        console.log('\nüìä RELAT√ìRIO FINAL:');
        console.log(`‚úÖ Sucessos: ${successCount}`);
        console.log(`‚ùå Erros: ${errorCount}`);
        console.log(`üìà Total processado: ${ipArray.length}`);

        // Lista detalhada dos resultados
        console.log('\nüìã DETALHES:');
        results.forEach(result => {
            const status = result.success ? '‚úÖ' : '‚ùå';
            console.log(`${status} ${result.deviceIp}`);
        });

        return {
            success: errorCount === 0,
            total: ipArray.length,
            successCount,
            errorCount,
            results
        };

    } catch (error) {
        console.error('üí• Erro geral no processamento:', error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

// Executa o script se for chamado diretamente
if (require.main === module) {
    // Verifica se deve executar o registro de usu√°rios ou configura√ß√£o de catracas
    const args = process.argv.slice(2);
    const shouldRegisterUsers = args.includes('--register-users') || args.includes('-u');
    
    if (shouldRegisterUsers) {
        console.log('üöÄ Modo: Registro de usu√°rios em catracas');
        registerAllUsersInAllRatchets()
            .then(result => {
                if (result.success) {
                    console.log('\nüéâ Registro de usu√°rios conclu√≠do com sucesso!');
                    process.exit(0);
                } else {
                    console.log('\nüí• Registro de usu√°rios conclu√≠do com erros');
                    process.exit(1);
                }
            })
            .catch(error => {
                console.error('üí• Erro inesperado:', error);
                process.exit(1);
            });
    } else {
        console.log('üöÄ Modo: Configura√ß√£o de catracas');
        registerMultipleRatchets()
            .then(result => {
                if (result.success) {
                    console.log('\nüéâ Processamento conclu√≠do com sucesso!');
                    process.exit(0);
                } else {
                    console.log('\nüí• Processamento conclu√≠do com erros');
                    process.exit(1);
                }
            })
            .catch(error => {
                console.error('üí• Erro inesperado:', error);
                process.exit(1);
            });
    }
}

module.exports = { 
    registerMultipleRatchets, 
    registerSingleRatchet,
    registerAllUsersInAllRatchets,
    registerUserInRatchet,
    fetchParticipants,
    redisCache
};
